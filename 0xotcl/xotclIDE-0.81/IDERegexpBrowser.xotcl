# automatically generated from XOTclIDE
# script require component IDECore
@ Component IDERegexpBrowser {
description {IDE::RegexpBrowser newBrowser

###############################################################################################
#
# VisualREGEXP -- A graphical front-end to wirte/debug regular expression
# (c) 2000-2002 Laurent Riesterer
#
# VisualREGEXP Home Page: http://laurent.riesterer.free.fr/regexp
#
#----------------------------------------------------------------------------------------------
#
# Usage: tkregexp <sampleFile>
#
#----------------------------------------------------------------------------------------------
#
# This program is free software; you can redistribute it and/or modify  
# it under the terms of the GNU General Public License as published by  
# the Free Software Foundation; either version 2 of the License, or  
# (at your option) any later version.  
#  
# This program is distributed in the hope that it will be useful,  
# but WITHOUT ANY WARRANTY; without even the implied warranty of  
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  
# GNU General Public License for more details.  
#  
# You should have received a copy of the GNU General Public License  
# along with this program; if not, write to the Free Software  
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA  
#
###############################################################################################

Regexpr was modifed to XOTcl and addapted for XOTclIDE from Artur Trzewik
}
}
package provide IDERegexpBrowser 0.74
package require IDECore
namespace eval ::make-regexp {}
@ tclproc ::make-regexp::optimize:charset idemeta struct IDERegexpBrowser make-regexp
proc ::make-regexp::optimize:charset regexp {
	set optimized ""
	set memory ""
	set ok 1
	set charset ""
	# examine char one by one
	set len [string length $regexp]
	for {set i 0} {$i < $len} {incr i} {
		set char [string index $regexp $i]
		append memory $char
		if {$char eq "("} {
			# start of group
			if {$ok} {
				append optimized [string range $memory 0 end-1]
			}
			incr i
			set result [optimize:charset [string range $regexp $i end]]
			append optimized "[lindex $result 2][lindex $result 0][lindex $result 3]"
			set memory ""
			set ok 0
			incr i [expr [lindex $result 1]]
			continue
		} elseif {$char  eq ")"} {
			# end of group
			if {$ok} {
				set optimized "\[$charset\]"
				return [list $optimized $i "" ""]
			} else {
				return [list $optimized $i "(" ")"]
			}
		}
		if {$ok} {
			if {$i & 1} {
				if {$char != "|"} {
					set ok 0
					append optimized $memory
				}
			} else {
				append charset $char
			}
		} else {
			append optimized $char
		}
	}
	# return result
	list $optimized $i "(" ")"
}
@ tclproc ::make-regexp::suffix idemeta struct IDERegexpBrowser make-regexp
proc ::make-regexp::suffix list {
	# end of recursion if empty list
	if {[llength $list] == 0} {
		return
	}
	set newlist {}
	foreach {prefix recurse} $list {
		set result [suffix $recurse]
		lappend newlist $prefix [lindex $result 0]
	}
	# compute longest common suffixes
	set words {}
	foreach {prefix tail} $newlist {
		if {[firstLevelGroup $tail]} {
			set tail "($tail)"
		}
		lappend words [reverse $prefix$tail]
	}
	set words [lsort -unique $words]
	set reverse [prefix $words]
	# compute regexp from precomputed reverse list
	set regexp [build "" $reverse]
	# returns computed regexp
	set regexp
}
@ tclproc make-regexp::build idemeta struct IDERegexpBrowser make-regexp
proc make-regexp::build {mainstem reverse} {
	# flag to indicate need for '?' (optional group)
	set addQuestionMark 0
	set regexp ""
	foreach {prefix recurse} $reverse {
		set stem "[reverse $prefix]$mainstem"
		if {[llength $recurse]} {
			set fromlower [build $stem $recurse]
		} else {
			set fromlower ""
		}
		# build regexp
		if {$prefix == ""} {
			set addQuestionMark 1
		} else {
			if {[string length $fromlower] > 1 && [string index $fromlower end] != "?"} {
				set fromlower "($fromlower)"
			}
			append regexp "$fromlower[reverse $prefix]|"
		}
	}
	# remove last trailing '|'
	set regexp "[string range $regexp 0 end-1]"
	# add '?' if needed
	if {$addQuestionMark} {
		if {[string length $regexp] == 1} {
			set regexp "$regexp?"
		} else {
			set regexp "($regexp)?"
		}
	}
	# result
	set regexp
}
@ tclproc make-regexp::firstLevelGroup idemeta struct IDERegexpBrowser make-regexp
proc make-regexp::firstLevelGroup str {
	set depth 0
	foreach c [split $str {}] {
		if {$c == "("} {
			incr depth -1
		} elseif {$c == ")"} {
			incr depth +1
		} elseif {$depth == 0 && $c == "|"} {
			return 1
		}
	}
	return 0
}
@ tclproc make-regexp::isBalanced idemeta struct IDERegexpBrowser make-regexp
proc make-regexp::isBalanced str {
	# if start with '?' skip it
	if {[string index $str 0] == "?"} {
		return 0
	}
	# must start with a ')'
	if {[string index $str 0] != ")"} {
		return 1
	}
	# try to balanced each ')' with an appropriate '('
	set depth 0
	foreach c [split $str {}] {
		if {$c == "("} {
			incr depth -1
		} elseif {$c == ")"} {
			incr depth +1
		}
	}
	return [expr $depth == 0]
}
@ tclproc make-regexp::isOrphans idemeta struct IDERegexpBrowser make-regexp
proc make-regexp::isOrphans exp {
	set orphan 0
	foreach {prefix recurse} $exp {
		if {[string index $prefix 0] == "|"} {
			set orphan 1
			break
		}
		if {[isOrphans $recurse]} {
			set orphan 1
			break
		}
	}
	set orphan
}
@ tclproc make-regexp::make-regexp idemeta struct IDERegexpBrowser make-regexp
proc make-regexp::make-regexp words {
	set words [lsort -unique $words]
	# escape special chars used to form regexp
	regsub -all -- {\|} $words "\x01" words
	regsub -all -- {\(} $words "\x02" words
	regsub -all -- {\)} $words "\x03" words
	regsub -all -- {\?} $words "\x04" words
	regsub -all -- {\[} $words "\x07" words
	regsub -all -- {\]} $words "\x08" words
	# do it
	set list [prefix $words]
	set regexp [suffix $list]
	# returns regexp
  	set regexp [lindex [optimize:charset $regexp] 0]
	# un-escape special chars used to form regexp
	regsub -all -- "\x01" $regexp "\\|" regexp
	regsub -all -- "\x02" $regexp "\\(" regexp
	regsub -all -- "\x03" $regexp "\\)" regexp
	regsub -all -- "\x04" $regexp "\\?" regexp
	regsub -all -- "\x07" $regexp "\\\[" regexp
	regsub -all -- "\x08" $regexp "\\\]" regexp
	regsub -all -- "\\*" $regexp "\\*" regexp
	regsub -all -- "\\+" $regexp "\\+" regexp
	regsub -all -- "\\\$" $regexp "\$" regexp
	regsub -all -- "\\\^" $regexp "\\\^" regexp
	# returns result
	set regexp
}
@ tclproc make-regexp::optimize:charset idemeta struct IDERegexpBrowser make-regexp
proc make-regexp::optimize:charset regexp {
	set optimized ""
	set memory ""
	set ok 1
	set charset ""
	# examine char one by one
	set len [string length $regexp]
	for {set i 0} {$i < $len} {incr i} {
		set char [string index $regexp $i]
		append memory $char
		if {$char eq "("} {
			# start of group
			if {$ok} {
				append optimized [string range $memory 0 end-1]
			}
			incr i
			set result [optimize:charset [string range $regexp $i end]]
			append optimized "[lindex $result 2][lindex $result 0][lindex $result 3]"
			set memory ""
			set ok 0
			incr i [expr [lindex $result 1]]
			continue
		} elseif {$char  eq ")"} {
			# end of group
			if {$ok} {
				set optimized "\[$charset\]"
				return [list $optimized $i "" ""]
			} else {
				return [list $optimized $i "(" ")"]
			}
		}
		if {$ok} {
			if {$i & 1} {
				if {$char != "|"} {
					set ok 0
					append optimized $memory
				}
			} else {
				append charset $char
			}
		} else {
			append optimized $char
		}
	}
	# return result
	list $optimized $i "(" ")"
}
@ tclproc make-regexp::prefix idemeta struct IDERegexpBrowser make-regexp
proc make-regexp::prefix words {
	# init
	set result {}
	lappend words ""		;# to force last completion
	# group by first letter
	set prefix [string range [lindex $words 0] 0 0]
	set subwords [list [string range [lindex $words 0] 1 end]]
	foreach word [lrange $words 1 end] {
		set char [string range $word 0 0]
		if {$char == $prefix} {
			lappend subwords [string range $word 1 end]
		} else {
			# compute prefixes recursively
			set recurse [prefix $subwords]
			if {[llength $recurse] == 2} {
				# only one prefix, so concat with previous prefix
				append prefix [lindex $recurse 0]
				set recurse [lindex $recurse 1]
			}
			append result " [verify [list $prefix $recurse]]"
			set prefix $char
			set subwords [list [string range $word 1 end]]
		}
	}
	# return
	set result
}
@ tclproc make-regexp::reverse idemeta struct IDERegexpBrowser make-regexp
proc make-regexp::reverse string {
	set result ""
	for {set i [expr [string length $string]-1]} {$i >= 0} {incr i -1} {
		append result [string index $string $i]
	}
	set result
}
@ tclproc make-regexp::suffix idemeta struct IDERegexpBrowser make-regexp
proc make-regexp::suffix list {
	# end of recursion if empty list
	if {[llength $list] == 0} {
		return
	}
	set newlist {}
	foreach {prefix recurse} $list {
		set result [suffix $recurse]
		lappend newlist $prefix [lindex $result 0]
	}
	# compute longest common suffixes
	set words {}
	foreach {prefix tail} $newlist {
		if {[firstLevelGroup $tail]} {
			set tail "($tail)"
		}
		lappend words [reverse $prefix$tail]
	}
	set words [lsort -unique $words]
	set reverse [prefix $words]
	# compute regexp from precomputed reverse list
	set regexp [build "" $reverse]
	# returns computed regexp
	set regexp
}
@ tclproc make-regexp::verify idemeta struct IDERegexpBrowser make-regexp
proc make-regexp::verify exp {
	set orphans [isOrphans $exp]
	set result {}
	foreach {prefix recurse} $exp {
		if {![isBalanced $prefix]} {
			if {[llength $recurse]} {
				foreach {pp rr} $recurse {
					lappend result "$prefix$pp" $rr
				}
				if {![isBalanced $prefix] && $orphans} {
					set result [verify $result]
				}
			} else {
				lappend result "$prefix" ""
			}
		} else {
			lappend result $prefix $recurse
		}
	}
	# return result after fixing
	set result
}
Class IDE::RegexpBrowser
@ ::IDE::RegexpBrowser idemeta categories {sample replace regexp initialize-release history undoredo make-regexp}
@ ::IDE::RegexpBrowser idemeta categoriesMethods {{sample:set sample:save sample:load sample:background sample:move sample:colorize} {replace:toggle replace} {regexp:set regexp:help:toggle regexp:colorize regexp:insert regexp:load} {init makeMenus closeWindow destroy makeBindings makeHelpWindow} {history:init history:replay history:save history:add} {unredo:regexp undo:sample undo:regexp:compute} {make-regexp:ok make-regexp:compute make-regexp}}
@ ::IDE::RegexpBrowser idemeta component IDERegexpBrowser
IDE::RegexpBrowser instproc changeSampleWrap args {
    my instvar data v_wrap
    $data(w:sample) configure -wrap $v_wrap
}
IDE::RegexpBrowser instproc clear {} {
    my instvar winRegexp
    my history:add
    $winRegexp delete 1.0 end
    my go
}
IDE::RegexpBrowser instproc closeWindow {} {
    my destroy
}
IDE::RegexpBrowser instproc destroy {} {
    my instvar win historyWin
    ::destroy $win
    ::destroy $historyWin
    next
}
IDE::RegexpBrowser instproc dump {} {
    my instvar data

    # update display
    my go
    # built list of options
    set dump "regexp"
    foreach option {nocase all line lineanchor linestop inline} {
        if {[my set v:$option] ne ""} {
            append dump " [my set v:$option]"
        }
    }
    # build expression
    set exp [$data(w:regexp) get 1.0 end-1char]
    append dump " -- {$exp} string"
    # add variables if needed
    if {[my set v:inline] eq ""} {
        append dump " match"
        for {set i 1} {$i < $data(v:nblevels)} {incr i} {
            append dump " v$i"
        }
    }
    # put dump into the clipboard (by creating a hidden entry ... anyone has a better solution?)
    set tw .e
    destroy $tw
    entry $tw
    $tw insert 0 $dump
    $tw selection range 0 end
}
IDE::RegexpBrowser instproc go {} {
    my instvar winRegexp

    set exp [$winRegexp get 1.0 end-1char]
    # check if regexp is OK
    if {[catch { regexp -- $exp dummy } errMsg]} {
        tk_messageBox -type ok -icon error -message "Malformed regexp: $errMsg"
        return
    }
    my regexp:colorize
    my sample:colorize
    my history:add
}
IDE::RegexpBrowser instproc help {} {
    global tcl_platform
    set hwin .help
    if {[winfo exist $hwin]} return        
    toplevel $hwin
    wm title $hwin "Help"
    # logo
    label $hwin.l -image logo
    pack $hwin.l -side top -padx 10 -pady 10
    # help text
    if {$tcl_platform(platform) == "windows"} {
        text $hwin.t -bd 2 -relief groove -font {Courier 10}
    } else {
        text $hwin.t -bd 2 -relief groove
    }
    pack $hwin.t -side top -padx 20
    $hwin.t tag configure bold -font "[$hwin.t cget -font] bold"
    $hwin.t insert 1.0 "Version:" bold " [IDE::RegexpBrowser set version]
    Redesigned to XOTclIDE Plug-In by Artur Trzewik
" normal "Usage:" bold " tkregexp <sampleFile>

" normal "Key bindings:" bold " Alt-q               exit
              Alt-a               toggle 'all' flag
              Alt-n               toggle 'nocase' flag
              Alt-l               toggle 'line' flag
              Alt-k               toggle 'lineanchor' flag
              Alt-m               toggle 'linestop' flag
              Alt-i               toggle 'inline' flag
              Alt-g               do the highlighting
              Return (in regexp)  do the highlighting

" normal "To clipboard:" bold " Put the 'regexp' command with its arguments to the clipboard

" normal "Tips:" bold " 1) To set the sample, either put a filename on the command line,
         or just copy & paste it in the sample text window.
      2) You can change the default colors or windows size by editing the
         first lines of the program file.
      3) when typing your regexp you can use Control-Z/Control-R
         to undo/redo the last typing.
      4) When using the replace function, using Control-Z restore the value
         of the sample before the replacement : you try, retry, reretry, ..."
    # ok button
    button $hwin.ok -text "Ok" -width 10 -default active -command "destroy $hwin"
    pack $hwin.ok -side bottom -pady 10
}
IDE::RegexpBrowser instproc history:add {} {
    my instvar data winRegexp w_history last counter inReplay

    if {$inReplay} {
        set inReplay 0
        return
    }

    set exp [$winRegexp get 1.0 end-1char]
    if {$exp != "" && $exp != $last} {
        # memorize position
        set start [$w_history index insert]
        # add text
        $w_history insert end "$exp\n"
        set end [$w_history index insert]
        $w_history insert end "\n" {spacing}
        set last $exp
        $w_history yview moveto 1.0
        # do the binding
        set tag "t$counter"
        incr counter
        $w_history tag bind $tag <Any-Enter> "$w_history tag configure $tag -background lightblue"
        $w_history tag bind $tag <Any-Leave> "$w_history tag configure $tag -background {}"
        $w_history tag bind $tag <1> [list [self] history:replay [list $exp]]
        $w_history tag add $tag $start $end

        # colorize the expression in history
        scan $start "%d.%d" sl sc
        incr sl -1
        foreach tag {e0 e1 e2 e3 e4 e5 e6 e7 e8 e9 lookahead noreport} {
            foreach {start end} [$data(w:regexp) tag ranges $tag] {
                set start [$w_history index "$start + $sc chars + $sl lines"]
                set end [$w_history index "$end + $sc chars + $sl lines"]
                $w_history tag add $tag $start $end
            }
        }
    }
}
IDE::RegexpBrowser instproc history:init {} {
    my instvar data w_history historyWin
    IDE::RegexpBrowser instvar font
    set w [toplevel [Object autoname .history]]
    set historyWin $w
    
    wm title $w "Visual REGEXP [IDE::RegexpBrowser set version] -- REGEXP History"
    wm geometry $w 640x480
    wm protocol $w WM_DELETE_WINDOW "[self] set v_history 0; wm withdraw $w"

    # text zone	
    set tf [frame $w.t]
    pack $tf -side top -expand true -fill both
    set t [text $tf.t -xscrollcommand "$tf.x set" -yscrollcommand "$tf.y set"  -bg white -font [IDE::RegexpBrowser set font_regexp] -width 5 -height 1  -selectbackground lightblue -selectborderwidth 0]
    
    set w_history $t
    set data(w:history) $t
    
    $t tag configure spacing -font {Helvetica 6}
    set tx [scrollbar $tf.x -bd 1 -orient horizontal -command "$t xview"]
    set ty [scrollbar $tf.y -bd 1 -orient vertical -command "$t yview"]
    bindtags $t "$t all"
    grid $t  $ty -sticky news
    grid $tx x   -sticky news
    grid columnconfigure $tf {0} -weight 1
    grid columnconfigure $tf {1} -weight 0
    grid rowconfigure $tf {0} -weight 1
    grid rowconfigure $tf {1} -weight 0

    # buttons
    set bf [frame $w.f]
    pack $bf -side bottom -padx 5 -pady 5

    set b1 [button $bf.1 -bd 1 -text "Hide" -command "wm withdraw $w; [self] set v_history 0"]
    set b2 [button $bf.2 -bd 1 -text "Save ..." -command [list [self] history:save]]
    pack $b2 $b1 -side left -anchor c

    wm withdraw $w
}
IDE::RegexpBrowser instproc history:replay text {
    my set inReplay 1
    my regexp:set $text
    my go
}
IDE::RegexpBrowser instproc history:save {} {
    my instvar w_history
    set file [tk_getSaveFile -defaultextension .txt]
    if {$file != ""} {
        set out [open $file "w"]
        puts -nonewline $out [$w_history get 1.0 end]
        close $out
    }
}
IDE::RegexpBrowser instproc init topwindow {
    my instvar data win winRegexp
    my requireNamespace
    IDE::RegexpBrowser instvar colors bgcolors color_noreport color_lookahead geometry show_help regexp_db history font_regexp font_sample version mode font_replace background
    global tcl_platform

    set data(v:undo:index) 0
    set data(v:undo:sample) ""
    set data(v:dir) "."
    set data(v:file) "untitled.txt"
    my set last ""
    my set counter 0
    my set inReplay 0
   
    my history:init

    set win $topwindow
    set top [toplevel $win]
    wm protocol $win WM_DELETE_WINDOW [list [self] closeWindow]
    set rootwindow [winfo toplevel $top]
    # frame for regexp
    set w [frame $top.regexp -bd 2 -relief groove]
    # options
    set fo [frame $w.options]
    set sep 0
    foreach option {nocase all - line lineanchor linestop - inline}  label {nocase all - line "lineanchor (k)" "linestop (m)" - inline}  underline {0 0 - 0 12 10 - 0} {
        if {$option != "-"} {
            checkbutton $fo.$option -text $label -bd 1 -underline $underline  -variable [self]::v:$option  -offvalue "" -onvalue "-$option"
            my set v:$option ""
            pack $fo.$option -side left
        } else {
            pack [frame $fo.[incr sep] -width 40] -side left
        }
    }
    # text for regexp entry
    set data(w:regexp) [text $w.regexp -wrap char -bg white -font $font_regexp  -selectbackground lightblue -selectborderwidth 0  -width 1 -height 3 -bd 1]
    set winRegexp $data(w:regexp)
    
    my makeHelpWindow $w
    
    # buttons & selection of match
    set fb [frame $w.b]
    button $fb.go -text "Go" -underline 0 -command [list [self] go] -bd 1 -width 5
    button $fb.clear -text "Clear (z)" -underline 7 -command [list [self] clear] -bd 1 -width 5
    pack $fb.go [frame $fb.00 -width 10] $fb.clear -side left -pady 5

    # selection - buttons for match level
    label $fb.sep
    label $fb.l -text "Select:"
    pack $fb.sep -side left -fill x -expand true
    pack $fb.l -side left -padx 5 -pady 5
    set i 0
    foreach c $colors t {match 1 2 3 4 5 6 7 8 9} {
        button $fb.$i -text $t -fg $c -bd 1 -padx 0 -width 6 -command [list [self] select $i]
        pack $fb.$i -side left -fill y -pady 5
        incr i
    }
    # text for replace
    set f [frame $w.replace]
    set data(w:replace) [text $f.replace -wrap char -bg white -font $font_replace  -selectbackground lightblue -selectborderwidth 0  -width 1 -height 2 -bd 1]
    button $f.do -text "Replace" -underline 0 -bd 1 -width 9 -command [list [self] replace]
    label $f.nb -textvariable [self]::v_nbreplace -width 12 -anchor e
    pack $data(w:replace) -side left -expand true -fill both -pady 5 -padx 5
    pack $f.do -side left -pady 5
    pack $f.nb -side left -pady 5 -padx 5
    # layout
    pack [frame $w.0 -height 5] $data(w:regexp) -side top -anchor w -padx 5 -expand true -fill both
    pack $fo $fb -side top -anchor w -padx 5 -expand true -fill both
    pack $fb -side top -anchor w -padx 5 -expand true -fill both
    set data(w:allreplace) $f
    # frame for sample
    set w [frame $top.sample -bd 2 -relief groove]
    set w [frame $w.inner]
    pack $top.sample.inner -padx 5 -pady 5 -fill both -expand true
    # text for sample highlighting
    set data(w:sample) [text $w.sample  -bg white -font $font_sample -bd 1 -width 1 -height 20  -selectbackground lightblue -selectborderwidth 0  -yscrollcommand "$w.sy set" -xscrollcommand "$w.sx set"]
    scrollbar $w.sy -command "$w.sample yview" -orient vertical -bd 1
    scrollbar $w.sx -command "$w.sample xview" -orient horizontal -bd 1
    # set tags for colors & special
    set data(v:levels) {e0 e1 e2 e3 e4 e5 e6 e7 e8 e9}
    foreach level $data(v:levels)  color $colors {
        $data(w:regexp) tag configure $level -foreground $color
        # $data(w:history) tag configure $level -foreground $color
        $data(w:sample) tag configure $level -foreground $color
    }
    $data(w:regexp) tag configure lookahead -background $color_lookahead
    $data(w:regexp) tag configure noreport -background $color_noreport
    $data(w:history) tag configure lookahead -background $color_lookahead
    $data(w:history) tag configure noreport -background $color_noreport
    # actions
    set f [frame $w.matches]
    label $f.nb -textvariable [self]::v_nbmatches -anchor w
    my set v_nbmatches "0 matches"
    # button for navigation
    button $f.p -text "Previous" -bd 1 -pady 2 -width 8 -command [list [self] sample:move -1]
    button $f.n -text "Next" -bd 1 -pady 2 -width 8 -command [list [self] sample:move +1]
    set data(v:positions) [list ]
    set data(v:position) 0
    # layout
    pack $f.nb [frame $f.0 -width 15] $f.p $f.n -padx 5 -side left
		
    # layout
    grid $w.sample	$w.sy	-sticky news
    grid $w.sx		x		-sticky news
    grid $w.matches	-		-sticky news
    grid rowconfigure $w {0} -weight 1
    grid columnconfigure $w {0} -weight 1
    # main layout
    pack $top.regexp -side top -anchor w -padx 5 -pady 5 -fill x
    pack $top.sample -side top -anchor w -padx 5 -pady 5 -expand true -fill both
    #wm geometry $rootwindow $geometry
    wm title $rootwindow "Visual REGEXP $version - XOTclIDE Plugin"
    focus $data(w:regexp)
    # main menu
    my makeMenus

    # key binding
    my makeBindings

    # some init
    my set v_nocase -nocase
    my set v_all -all
    my set v_wrap char
    my set v_mode $mode
    my replace:toggle		;# set bindings
    my regexp:help:toggle
}
IDE::RegexpBrowser instproc make-regexp {} {
    my instvar data
    IDE::RegexpBrowser instvar font_regexp
    # new dialog
    catch { destroy .mkregexp }
    set w [toplevel .mkregexp]
    wm title $w "Make regexp"
    wm geometry $w 640x480
    # widgets
    set f [frame $w.top]
    # area to input words
    label $f.l1 -text "Words list:"
    set list [text $f.list -wrap char -bg white -font $font_regexp  -selectbackground lightblue -selectborderwidth 0  -width 1 -height 10 -bd 1 -yscrollcommand "$f.sy1 set"]
    scrollbar $f.sy1 -command "$list yview" -orient vertical -bd 1
    # button to compute the regexp
    set doit [button $f.doit -text "Compute" -width 15 -bd 1 -command [list [self] make-regexp:compute]]
    # display result
    label $f.l2 -text "Regexp:"
    set output [text $f.output -wrap char -bg white -font $font_regexp  -selectbackground lightblue -selectborderwidth 0  -width 1 -height 4 -bd 1 -yscrollcommand "$f.sy2 set"]
    bindtags $output "$output all"
    scrollbar $f.sy2 -command "$output yview" -orient vertical -bd 1
    # layout
    grid $f.l1	$list		$f.sy1		-sticky news
    grid $doit	-			-			-sticky ns -pady 2
    grid $f.l2	$output	$f.sy2		-sticky news
    grid columnconfigure $f {1} -weight 1
    grid rowconfigure $f {0 2} -weight 1
    # init
    set data(w:make:list) $list
    set data(w:make:output) $output
    # button OK / CANCEL
    set ff [frame $w.bottom]
    set ok [button $ff.ok -text "Insert into regexp" -width 20 -bd 1 -command [list [self] make-regexp:ok $w]]
    set cancel [button $ff.cancel -text "Cancel" -width 20 -bd 1 -command [list destroy $w]]
    pack $ok $cancel -side left -fill both -padx 10 -pady 10
    # layout
    pack $f -side top -expand true -fill both
    pack $ff -side bottom -anchor c
}
IDE::RegexpBrowser instproc make-regexp:compute {} {
    my instvar data

    set words [$data(w:make:list) get 1.0 end-1c]
    $data(w:make:output) delete 1.0 end
    $data(w:make:output) insert 1.0 [make-regexp::make-regexp $words]
}
IDE::RegexpBrowser instproc make-regexp:ok w {
    my instvar data

    set words [$data(w:make:list) get 1.0 end-1c]

    $data(w:regexp) insert insert "([make-regexp::make-regexp $words])"
    destroy $w
}
IDE::RegexpBrowser instproc makeBindings {} {
    my instvar data win
    set fo $win.regexp.options
    set top $win
    
    bind $top <Alt-q> [list [self] closeWindow]
    bind $top <Alt-g> [list [self] go]
    bind $data(w:regexp) <Return> "[self] go; break"
    bind $top <Alt-c> [list [self] dump]
    bind $top <Alt-r> [list [self] replace]
    bind $top <Alt-o> [list [self] sample:load]
    bind $top <Alt-s> [list [self] sample:save auto]

    bind $data(w:regexp) <Control-z> [list [self] unredo:regexp -1]
    bind $data(w:regexp) <Control-r> [list [self] unredo:regexp +1]

    bind $data(w:replace) <Control-z> [list [self] undo:sample]
    bind $data(w:sample) <Control-z> [list [self] undo:sample]

    bind $top <Alt-a> "$fo.all toggle"
    bind $top <Alt-n> "$fo.nocase toggle"
    bind $top <Alt-l> "$fo.line toggle"
    bind $top <Alt-k> "$fo.lineanchor toggle"
    bind $top <Alt-m> "$fo.linestop toggle"
    bind $top <Alt-i> "$fo.inline toggle"
    bind $top <Alt-z> [list [self] clear]

    bind $data(w:regexp) <Control-Key> { # nothing }
    bind $data(w:regexp) <Alt-Key> { # nothing }
    bind $data(w:regexp) <Meta-Key> { # nothing }
    bind $data(w:regexp) <Mod1-Key> { # nothing }
    bind $data(w:regexp) <Key> [list [self] undo:regexp:compute %W %K %A]

    bind $data(w:replace) <Control-Tab> "$data(w:replace) insert insert {\\t}; break;"
    bind $data(w:sample) <Control-Tab> "$data(w:sample) insert insert {\t}; break;"
    # special for regexp Ctrl+letter = \<letter>
    bind $data(w:regexp) <Control-Tab> "$data(w:regexp) insert insert {\\t}; break;"
    foreach key {a b B e f n r t v u x 0 d D s S w W A Z m M y Y} {
        bind $data(w:regexp) <Control-$key> "$data(w:regexp) insert insert {\\$key}; break;"
    }
    foreach key {a b B e f n r t v u x 0} {
        bind $data(w:replace) <Control-$key> "$data(w:replace) insert insert {\\$key}; break;"
    }

    bind Text <Control-v> {}

    if {0} {
        # font selection popup
        foreach w {regexp replace sample} {
            set m [menu $top.fonts_$w -tearoff 0]
            foreach f $fonts {
                if {$f == "----"} {
                    $m add separator
                } else {
                    $m add command -label $f -command "$data(w:$w) configure -font [list $f]"
                }
            }
            bind $data(w:$w) <3> "tk_popup $m %X %Y"
        }
    }
}
IDE::RegexpBrowser instproc makeHelpWindow w {
     my instvar data
     global tcl_platform
     if {$tcl_platform(platform) == "windows"} {
        set sfont {Courier 8}
        set sbfont {Courier 8 bold}
    } else {
        set sfont 6x13
        set sbfont 6x13bold
    }
    set data(w:help) [text $w.help -font $sfont -bd 0 -height 9 -wrap none -bg [$w cget -bg]]
    $w.help insert 1.0 "\n\n\n\n\n\n\n\n"
    $w.help insert 1.0 {\a  alert              \n     newline     \0    char 0       \d [[:digit:]]    \A beginning of the string }
    $w.help insert 2.0 {\b  backspace          \r     carriage    \xyz  octal code   \D [^[:digit:]]   \Z end of string }
    $w.help insert 3.0 {\B  synomyn for \      \t     tab                            \s [[:space:]]    \m beginning of a word}
    $w.help insert 4.0 {\cX same as X & 0x1F   \uwxyz unicode     \x    backref      \S [^[:space:]]   \M end of a word}
    $w.help insert 5.0 {\e  ESC                \v     vert tab                       \w [[:alnum:]_]   \y beginning or end of a word}
    $w.help insert 6.0 {\f  form feed          \xhhh  hexa code                      \W [^[:alnum:]_]  \Y not beginning or end of a word}
    $w.help insert 7.0 {----------------------------------------------------------------------------------------------------------------}
    $w.help insert 8.0 {    ungreedy:          ?? single optional *? zero-many       +? at least one   {n,m}? ungreedy quantifiers}
    $w.help insert 9.0 {(?:) ghost group       (?=) lookahead     (?!) neg. lookahead}
    $w.help tag configure bold -font $sbfont
    foreach line {1 2 3 4 5 6} {
        foreach {min max} {0 2 23 25 42 44 61 63 79 82} {
            $w.help tag add bold $line.$min $line.$max
        }
    }
    $w.help tag remove bold 2.43 2.44 4.43 4.44
}
IDE::RegexpBrowser instproc makeMenus {} {
    my instvar win data
    set rootwindow $win
    set top $win
    IDE::RegexpBrowser instvar colors bgcolors color_noreport color_lookahead geometry show_help regexp_db history font_regexp font_sample version mode font_replace background
    
    $rootwindow configure -menu $top.menubar
    set m [menu $top.menubar -tearoff 0 -bd 1 -activeborderwidth 1]
    # file
    $m add cascade -menu $m.file -label "File" -underline 0
    set mm [menu $m.file -tearoff 0 -bd 1 -activeborderwidth 1]
    $mm add command -label "Load regexp ..." -command [list [self] regexp:load]
    $mm add command -label "Load sample ..." -command [list [self] sample:load] -accelerator "Alt-O"
    $mm add separator
    $mm add command -label "Save sample (auto) ..." -command [list [self] sample:save auto] -accelerator "Alt-S"
    $mm add command -label "Save sample Unix (lf) ..." -command [list [self] sample:save lf]
    $mm add command -label "Save sample Windows (crlf) ..." -command [list [self] sample:save crlf]
    $mm add command -label "Save sample Mac (cr) ..." -command [list [self] sample:save cr]
    $mm add separator
    $mm add command -label "Quit" -underline 0 -command [list [self] closeWindow] -accelerator "Alt-Q"
    # edit
    $m add cascade -menu $m.edit -label "Edit" -underline 0
    set mm [menu $m.edit -tearoff 0 -bd 1 -activeborderwidth 1]
    $mm add command -label "Copy regexp to clipboard" -command [list [self] dump] -accelerator "Alt-C"
    $mm add separator
    $mm add command -label "Undo" -command [list [self] unredo:regexp -1] -accelerator "Control-Z"
    $mm add command -label "Redo" -command [list [self] unredo:regexp +1] -accelerator "Control-R"
    # view
    $m add cascade -menu $m.view -label "View" -underline 0
    set mm [menu $m.view -tearoff 0 -bd 1 -activeborderwidth 1]
    set data(v:background) $background
    # sample:background
    $mm add checkbutton -label "Show background for matches" -command [list [self] sample:background]  -variable [self]::v_background
    $mm add checkbutton -label "Show regexp help" -command [list [self] regexp:help:toggle]  -variable [self]::v_help
    set data(v:help) $show_help
    $mm add checkbutton -label "Wrap lines in sample" -variable [self]::v_wrap  -command [list [self] changeSampleWrap]  -offvalue "none" -onvalue "char"
    my set v_history $history
    $mm add checkbutton -label "History of Regexp" -variable [self]::v_history  -command [list [self] showHistory]
    # select mode
    $m add cascade -menu $m.select -label "Select mode" -underline 5
    set mm [menu $m.select -tearoff 0 -bd 1 -activeborderwidth 1]
    $mm add radiobutton -label "select / concat raw matches"  -variable [self]::v_mode -value "raw" -command [list [self] replace:toggle]
    $mm add radiobutton -label "select / insert new line between matches" -variable [self]::v_mode -value "nl" -command [list [self] replace:toggle]
    $mm add radiobutton -label "replace widget"  -variable [self]::v_mode -value "replace" -command [list [self] replace:toggle]
    # insert well know regexp
    $m add cascade -menu $m.insert -label "Insert regexp" -underline 11
    set mm [menu $m.insert -tearoff 0 -bd 1 -activeborderwidth 1]
    $mm add command -label "Make regexp ..." -command [list [self] make-regexp]
    $mm add separator
    $mm add command -label "Load patterns ..." -command [list [self] pattern:load]
    $mm add separator
    foreach {n e} $regexp_db {
        $mm add command -label "$n" -command [list [self] regexp:insert [list $e]]
    }
    set data(w:menu) $mm
    # help
    $m add cascade -menu $m.help -label "Help" -underline 0
    set mm [menu $m.help -tearoff 0 -bd 1 -activeborderwidth 1]
    $mm add command -label "Help" -command [list [self] help]
}
IDE::RegexpBrowser instproc pattern:load {{file {}}} {
    my instvar data
    IDE::RegexpBrowser instvar regexp_db
    
    # get filename
    if {$file == ""} {
        set types [list [list "All" *]]
        set file [tk_getOpenFile -filetypes $types -parent .]
        if {$file == ""} {
            return
        }
    }
    # do it
    set in [open $file "r"]
    $data(w:menu) delete [expr 4+[llength $regexp_db]/2] end
    while {![eof $in]} {
        set name [gets $in]
        while {$name == ""} {
            set name [gets $in]
        }
        set pattern [gets $in]
        while {$pattern == ""} {
            set pattern [gets $in]
        }
        $data(w:menu) add command -label $name -command [list [self] regexp:insert [list $pattern]]
    }
    close $in
}
IDE::RegexpBrowser instproc regexp:colorize {} {
    my instvar data

    set exp [$data(w:regexp) get 1.0 end-1char]
    set max [string length $exp]
    set stack {}
    # list format : min max min max ...
    set indices [list "report" 0 [string length $exp]]
    # search the groups in the regexp
    set data(v:nblevels) 1
    for {set i 0} {$i < $max} {incr i} {
        set c [string index $exp $i]
        if {$c == "\\"} {
            incr i
            continue
        } elseif {$c == "("} {
            set c [string index $exp [expr $i+1]]
            set what [string index $exp [expr $i+2]]
            # test for escape with (?...)
            if {$c == "?"} {
                if {$what != ":"} {
                    lappend indices "lookahead"
                } else {
                    lappend indices "noreport"
                }
            } else {
                lappend indices "report"
                incr data(v:nblevels)
            }
            lappend indices $i
            set stack "[llength $indices] $stack"
            lappend indices 0

        } elseif {$c == ")"} {
            set idx [lindex $stack 0]
            if {$idx == ""} {
                continue
            }
            set stack [lrange $stack 1 end]
            set indices [lreplace $indices $idx $idx $i]
        }
    }

    # remove old colors
    foreach level $data(v:levels) {
        $data(w:regexp) tag remove $level 1.0 end
    }
    $data(w:regexp) tag remove "lookahead" 1.0 end
    $data(w:regexp) tag remove "noreport" 1.0 end
    # colorize the regexp
    set i 0
    foreach {type min max} $indices {
        if {$type != "report"} {
            continue
        }
        $data(w:regexp) tag add [lindex $data(v:levels) $i]  [$data(w:regexp) index "1.0+${min}chars"]  [$data(w:regexp) index "1.0+[expr $max+1]chars"]
        incr i
    }
    # apply special item
    foreach {type min max} $indices {
        if {$type == "report"} {
            continue
        }
        $data(w:regexp) tag add $type  [$data(w:regexp) index "1.0+${min}chars"]  [$data(w:regexp) index "1.0+[expr $max+1]chars"]
    }
}
IDE::RegexpBrowser instproc regexp:help:toggle {} {
    my instvar v_help data
    if {$v_help == 0} {
        pack forget $data(w:help)
    } else {
        pack $data(w:help) -before $data(w:regexp) -fill x -padx 5
    }
}
IDE::RegexpBrowser instproc regexp:insert what {
    my instvar data

    set w $data(w:regexp)
    # prepare undo/redo
    set data(v:undo:r$data(v:undo:index)) [list [$w index insert] [$w get 1.0 end-1char]]
    set data(v:undo:index) [expr ($data(v:undo:index)+1) % 100]
    # do it
    $w insert insert $what
    # prepare undo/redo
    set data(v:undo:r$data(v:undo:index)) [list [$w index insert] [$w get 1.0 end-1char]]
}
IDE::RegexpBrowser instproc regexp:load {} {
    my instvar data

    # get filename
    set types [list [list "All" *]]
    set file [tk_getOpenFile -filetypes $types -parent .]
    if {$file == ""} {
        return
    }
    # do it
    set in [open $file "r"]
    my regexp:set [read $in [file size $file]]
    close $in
}
IDE::RegexpBrowser instproc regexp:set text {
    my instvar data

    $data(w:regexp) delete 1.0 end
    $data(w:regexp) insert 1.0 $text
}
IDE::RegexpBrowser instproc replace {} {
    my instvar data v:all v:line v:lineanchor v:linestop v:nocase v_nbreplace

    set exp [$data(w:regexp) get 1.0 end-1char]
    set subst [$data(w:replace) get 1.0 end-1char]
    if {$exp == ""} {
        set v_nbreplace "empty regexp"
        return
    }

    # get sample & store it for undo
    set sample [$data(w:sample) get 1.0 end]
    set data(v:undo:sample) $sample
    set result [eval regsub ${v:all} ${v:line} ${v:lineanchor} ${v:linestop} ${v:nocase} --  [list $exp] [list $sample] [list [subst -nocommands -novariables $subst]] sample]
    my set v_nbreplace "$result replaced"
    # display result
    $data(w:sample) delete 1.0 end
    $data(w:sample) insert 1.0 $sample
}
IDE::RegexpBrowser instproc replace:toggle {} {
    my instvar data v_mode

    if {$v_mode eq "replace"} {
        bind $data(w:regexp) <Tab> "focus $data(w:replace); break;"
        bind $data(w:regexp) <Shift-Tab> "focus $data(w:sample); break;"
        catch { bind $data(w:regexp) <ISO_Left_Tab> "focus $data(w:sample); break;" }

        bind $data(w:replace) <Tab> "focus $data(w:sample); break;"
        bind $data(w:replace) <Shift-Tab> "focus $data(w:regexp); break;"
        catch { bind $data(w:replace) <ISO_Left_Tab> "focus $data(w:regexp); break;" }

        bind $data(w:sample) <Tab> "focus $data(w:regexp); break;"
        bind $data(w:sample) <Shift-Tab> "focus $data(w:replace); break;"
        catch { bind $data(w:sample) <ISO_Left_Tab> "focus $data(w:replace); break;" }

        pack $data(w:allreplace) -side top -fill both

    } else {
        bind $data(w:regexp) <Tab> "focus $data(w:sample); break;"
        catch { bind $data(w:regexp) <ISO_Left_Tab> "focus $data(w:sample); break;" }

        bind $data(w:sample) <Tab> "focus $data(w:regexp); break;"
        catch { bind $data(w:sample) <ISO_Left_Tab> "focus $data(w:regexp); break;" }

        pack forget $data(w:allreplace)
    }
}
IDE::RegexpBrowser instproc sample:background {} {
    my instvar data
    IDE::RegexpBrowser instvar colors bgcolors
    foreach level $data(v:levels) color $colors bgcolor $bgcolors {
        if {$data(v:background)} {
            $data(w:sample) tag configure $level -foreground $color -background $bgcolor
        } else {
            $data(w:sample) tag configure $level -foreground $color -background {}
        }
    }
}
IDE::RegexpBrowser instproc sample:colorize {} {
    my instvar data v:all v:line v:lineanchor v:linestop v:nocase
    # remove old tags
    foreach level $data(v:levels) {
        $data(w:sample) tag remove $level 1.0 end
    }
    set data(v:position) 0
    set data(v:positions) [list ]

    # set new tags
    set exp [$data(w:regexp) get 1.0 end-1char]
    if {$exp == ""} {
        set data(v:result) {}
        return
    }
    set result [eval regexp -inline -indices ${v:all}  ${v:line} ${v:lineanchor} ${v:linestop} ${v:nocase} --  [list $exp] [list [$data(w:sample) get 1.0 end]]]
    set data(v:result) $result
    set i 0
    foreach match $result {
        set start [$data(w:sample) index "1.0+[lindex $match 0]chars"]
        $data(w:sample) tag add e[expr $i % $data(v:nblevels)]  $start [$data(w:sample) index "1.0+[expr [lindex $match 1]+1]chars"]
        lappend data(v:positions) $start
        if {$i == 0} {
            $data(w:sample) see $start
        }
        incr i
    }
    # set nb of matches
    if {$data(v:nblevels)} {
        set nb 0
        foreach item $result {
            if {[lindex $item 0] <= [lindex $item 1]} {
                incr nb
            }
        }
        my set v_nbmatches "[expr $nb/$data(v:nblevels)] matches"
    } else {
        my set v_nbmatches "? matches"
    }
}
IDE::RegexpBrowser instproc sample:load {} {
    my instvar data

    # get filename
    set types [list [list "All" *]]
    set file [tk_getOpenFile -initialdir $data(v:dir) -filetypes $types -parent .]
    if {$file == ""} {
        return
    }
    # memorize location
    set data(v:dir) [file dirname $file]
    set data(v:file) [file tail $file]
    # do it
    set in [open $file "r"]
    my sample:set [read $in [file size $file]]
    close $in
}
IDE::RegexpBrowser instproc sample:move amount {
    my instvar data
    if {$amount == -1} {
        if {$data(v:position) > 0} {
            incr data(v:position) -1
        }
    } else {
        if {$data(v:position) < [llength $data(v:positions)]-1} {
            incr data(v:position) +1
        }
    }
    set where [lindex $data(v:positions) $data(v:position)]
    if {$where != ""} {
        $data(w:sample) see $where
        $data(w:sample) mark set insert $where
        focus $data(w:sample)
    }
}
IDE::RegexpBrowser instproc sample:save mode {
    my instvar data

    # get filename
    set types [list [list "All" *]]
    set file [tk_getSaveFile -initialdir $data(v:dir) -initialfile $data(v:file)  -filetypes $types -parent .]
    if {$file == ""} {
        return
    }
    # memorize location
    set data(v:dir) [file dirname $file]
    set data(v:file) [file tail $file]
    # do it
    set out [open $file "w"]
    fconfigure $out -translation $mode
    puts $out [$data(w:sample) get 1.0 end]
    close $out
}
IDE::RegexpBrowser instproc sample:set text {
    my instvar data

    $data(w:sample) delete 1.0 end
    $data(w:sample) insert 1.0 $text
    set data(v:undo:sample) $text
}
IDE::RegexpBrowser instproc select level {
    my instvar data v_mode

    # update
    my go
    if {[llength $data(v:result)] == 0} {
        bell
        return
    }
    # puts regexp
    my dump
    # extract matching parts in sample
    set i 0
    set newsample ""
    foreach match $data(v:result) {
        if {($i % $data(v:nblevels)) == $level} {
            set text [$data(w:sample) get  [$data(w:sample) index "1.0+[lindex $match 0]chars"]  [$data(w:sample) index "1.0+[expr [lindex $match 1]+1]chars"]]
            append newsample $text
            if {$v_mode == "nl"} {
                append newsample "\n"
            }
        }
        incr i
    }
    $data(w:sample) delete 1.0 end
    $data(w:sample) insert 1.0 $newsample
    # update with regexp
    my go
}
IDE::RegexpBrowser instproc showHistory args {
    my instvar data v_history historyWin
    if {$v_history} {wm deiconify $historyWin} else {wm iconify $historyWin}
}
IDE::RegexpBrowser instproc undo:regexp:compute {w k a} {
    my instvar data

    if {[string match -nocase "*control*" $k]
    || [string match -nocase "*shift*" $k]
    || [string match -nocase "*alt*" $k]} {
        return
    }

    set data(v:undo:r$data(v:undo:index)) [list [$w index insert] [$w get 1.0 end-1char]]
    set data(v:undo:index) [expr ($data(v:undo:index)+1) % 100]
}
IDE::RegexpBrowser instproc undo:sample {} {
    my instvar data
    # display result
    $data(w:sample) delete 1.0 end
    $data(w:sample) insert 1.0 $data(v:undo:sample)
    # colorize
    my go
}
IDE::RegexpBrowser instproc unredo:regexp dir {
    my instvar data

    set index [expr ($data(v:undo:index)+$dir) % 100]
    if {![info exists data(v:undo:r$index)]} {
        return
    }
    set data(v:undo:index) $index

    set t $data(w:regexp)
    $t delete 1.0 end
    $t insert 1.0 [lindex $data(v:undo:r$index) 1]
    $t mark set insert [lindex $data(v:undo:r$index) 0]
}
IDE::RegexpBrowser proc createLogoImage {} {
     image create photo logo -data {}
}
IDE::RegexpBrowser proc initDefaults {} {
    if {[my exists initialized]} return
    my set initialized 1
    global tcl_platform
    my createLogoImage
    my set version 3.0
    my set geometry            800x600+0+0
    # main font used to display the text
    if {$tcl_platform(platform) == "windows"} {
        my set font_regexp     {Courier 10}
        my set font_replace    {Courier 10}
        my set font_sample     {Courier 10}
    } else {
        my set font_regexp		9x15
        my set font_replace	9x15
        my set font_sample		9x15
    }
    # the font used in the popup menu (use ---- to get a separator, else format is {font size ?bold?}
    my set fonts 				{{Courier 8} {Courier 9} {Courier 10} {Courier 11} {Courier 12}
    ----
    {Arial 8} {Arial 9} {Arial 10} {Arial 11} {Arial 12}
    ----
    8x13 8x13bold 9x15 9x15bold 10x20}
    # the colors for the different matching groups
    my set colors              {#ff0000 #0000ff darkgreen violetred #ff9000 #537db9 #e4c500     firebrick darkgoldenrod hotpink}
    my set bgcolors            {#ffe6e6 #e6e6ff #e6ffe6   #efd5e1   #fef3e5 #d6dce5 lightyellow white    white        white}
    # use background color in sample by default ? (1 use, 0 do not use)
    my set background			0
    # background color to visualize the non-reporting group (?:...)
    my set color_noreport      #fffdc4
    # background color to visualize the lookhead group (?=...) and (?!...)
    my set color_lookahead     wheat
    # show/hide help about control characters in regexp
    my set show_help			0
    # show/hide history windows on startup
    my set history				0
    # mode to use on startup (select/concat = raw, select/insert new lines = nl, replace = replace)
    my set mode				replace
    # database of some regexp to appear in the "Insert regexp" menu
    my set regexp_db {
        "URL"			{(?:^|")(http|ftp|mailto):(?://)?(\w+(?:[\.:@]\w+)*?)(?:/|@)([^"\?]*?)(?:\?([^\?"]*?))?(?:$|")}
        "IP numbers" 	{[12]?[0-9]?[0-9](\.[12]?[0-9]?[0-9]){3}}
        "HTML tags"		{<[^<>]+>}
        "HTML tag content" {<(\w+)[^>]*?>(.*?)</\1>}
        "vars and arrays (PHP)" {\$[^0-9 ]{1}[a-zA-Z0-9_]*((?:\[[a-zA-Z0-9_'\"]+\])*)}
        "dd/mm/yyyy"	{(0[1-9]|[12][0-9]|3[01])(/|-)(0[1-9]|1[12])(/|-)[12][0-9]{3}}
        "mm/dd/yyyy"	{(0[1-9]|1[12])(/|-)(0[1-9]|[12][0-9]|3[01])(/|-)[12][0-9]{3}}
        "hh:mm"			{([01][0-9]|2[0-3]):[0-5][0-9]}
        "user@domain.net" {[A-Za-z0-9_.-]+@([A-Za-z0-9_]+\.)+[A-Za-z]{2,4}}
    }
}
IDE::RegexpBrowser proc newBrowser {} {
    my initDefaults
    my new [Object autoname .regexpbrowser]
}

